//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Basketball/Input/inputplayer1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputplayer1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputplayer1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputplayer1"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""83b36ee3-b765-4c78-b8d1-75bcac4dc293"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""07a883f5-3072-4d48-a8a5-47b78f005cea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpShot"",
                    ""type"": ""Button"",
                    ""id"": ""87a06195-21ba-429f-8374-039bf90cc97b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpShotSpin"",
                    ""type"": ""Button"",
                    ""id"": ""1eb76a8b-02c5-4071-996e-ac3c8ed3868a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LayUp"",
                    ""type"": ""Button"",
                    ""id"": ""476ac070-2657-4b39-9f1a-dd79d89c2350"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StepBack"",
                    ""type"": ""Button"",
                    ""id"": ""63985dfe-52f9-4e3f-9f59-dc07eb23dc1c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pausar"",
                    ""type"": ""Button"",
                    ""id"": ""81e28b58-5a57-4371-9c50-cd0d47b12fdb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c01d5860-e742-4857-b2d3-ffe0da1116a5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpShot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6aa4090-3043-46da-9a36-ae5ff6022ebd"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpShot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dafe1770-b43d-43cb-b89a-1159748ffa56"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce76c840-a765-4728-8fec-83328a328e35"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpShotSpin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6626dd1a-cd91-40a2-9cd5-5f5688d98129"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LayUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f568102-520a-40e4-9e4b-a234b17928aa"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StepBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3680151-ebda-4c4e-b1af-e5bbf3cd4d53"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pausar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9ee8024-f707-4ae5-9854-a366db51ab77"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pausar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1
        m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
        m_Player1_Mover = m_Player1.FindAction("Mover", throwIfNotFound: true);
        m_Player1_JumpShot = m_Player1.FindAction("JumpShot", throwIfNotFound: true);
        m_Player1_JumpShotSpin = m_Player1.FindAction("JumpShotSpin", throwIfNotFound: true);
        m_Player1_LayUp = m_Player1.FindAction("LayUp", throwIfNotFound: true);
        m_Player1_StepBack = m_Player1.FindAction("StepBack", throwIfNotFound: true);
        m_Player1_Pausar = m_Player1.FindAction("Pausar", throwIfNotFound: true);
    }

    ~@Inputplayer1()
    {
        UnityEngine.Debug.Assert(!m_Player1.enabled, "This will cause a leak and performance issues, Inputplayer1.Player1.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1
    private readonly InputActionMap m_Player1;
    private List<IPlayer1Actions> m_Player1ActionsCallbackInterfaces = new List<IPlayer1Actions>();
    private readonly InputAction m_Player1_Mover;
    private readonly InputAction m_Player1_JumpShot;
    private readonly InputAction m_Player1_JumpShotSpin;
    private readonly InputAction m_Player1_LayUp;
    private readonly InputAction m_Player1_StepBack;
    private readonly InputAction m_Player1_Pausar;
    public struct Player1Actions
    {
        private @Inputplayer1 m_Wrapper;
        public Player1Actions(@Inputplayer1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mover => m_Wrapper.m_Player1_Mover;
        public InputAction @JumpShot => m_Wrapper.m_Player1_JumpShot;
        public InputAction @JumpShotSpin => m_Wrapper.m_Player1_JumpShotSpin;
        public InputAction @LayUp => m_Wrapper.m_Player1_LayUp;
        public InputAction @StepBack => m_Wrapper.m_Player1_StepBack;
        public InputAction @Pausar => m_Wrapper.m_Player1_Pausar;
        public InputActionMap Get() { return m_Wrapper.m_Player1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1ActionsCallbackInterfaces.Add(instance);
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
            @JumpShot.started += instance.OnJumpShot;
            @JumpShot.performed += instance.OnJumpShot;
            @JumpShot.canceled += instance.OnJumpShot;
            @JumpShotSpin.started += instance.OnJumpShotSpin;
            @JumpShotSpin.performed += instance.OnJumpShotSpin;
            @JumpShotSpin.canceled += instance.OnJumpShotSpin;
            @LayUp.started += instance.OnLayUp;
            @LayUp.performed += instance.OnLayUp;
            @LayUp.canceled += instance.OnLayUp;
            @StepBack.started += instance.OnStepBack;
            @StepBack.performed += instance.OnStepBack;
            @StepBack.canceled += instance.OnStepBack;
            @Pausar.started += instance.OnPausar;
            @Pausar.performed += instance.OnPausar;
            @Pausar.canceled += instance.OnPausar;
        }

        private void UnregisterCallbacks(IPlayer1Actions instance)
        {
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
            @JumpShot.started -= instance.OnJumpShot;
            @JumpShot.performed -= instance.OnJumpShot;
            @JumpShot.canceled -= instance.OnJumpShot;
            @JumpShotSpin.started -= instance.OnJumpShotSpin;
            @JumpShotSpin.performed -= instance.OnJumpShotSpin;
            @JumpShotSpin.canceled -= instance.OnJumpShotSpin;
            @LayUp.started -= instance.OnLayUp;
            @LayUp.performed -= instance.OnLayUp;
            @LayUp.canceled -= instance.OnLayUp;
            @StepBack.started -= instance.OnStepBack;
            @StepBack.performed -= instance.OnStepBack;
            @StepBack.canceled -= instance.OnStepBack;
            @Pausar.started -= instance.OnPausar;
            @Pausar.performed -= instance.OnPausar;
            @Pausar.canceled -= instance.OnPausar;
        }

        public void RemoveCallbacks(IPlayer1Actions instance)
        {
            if (m_Wrapper.m_Player1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1Actions @Player1 => new Player1Actions(this);
    public interface IPlayer1Actions
    {
        void OnMover(InputAction.CallbackContext context);
        void OnJumpShot(InputAction.CallbackContext context);
        void OnJumpShotSpin(InputAction.CallbackContext context);
        void OnLayUp(InputAction.CallbackContext context);
        void OnStepBack(InputAction.CallbackContext context);
        void OnPausar(InputAction.CallbackContext context);
    }
}
